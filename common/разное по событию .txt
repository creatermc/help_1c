Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ПроверяемыеРеквизиты.Добавить("ВыходыСотрудников.ТипРекрутера");
	
	ЗарплатаКадры.ПроверитьКорректностьДаты(Ссылка, НачалоПериода, "Объект.НачалоПериода", Отказ, НСтр("ru = 'Начало периода';
																								|en = 'Period start'"), , , Ложь);
		
	ЗарплатаКадры.ПроверитьКорректностьДаты(Ссылка, ОкончаниеПериода, "Объект.ОкончаниеПериода", Отказ, НСтр("ru = 'Окончание периода';
																								|en = 'Period end'"), , , Ложь);
	Если ЗначениеЗаполнено(ОкончаниеПериода) И ОкончаниеПериода < НачалоПериода Тогда
		
		ТекстСообщения = НСтр("ru = 'Не верно задано окончание периода';
								|en = 'Period end is specified incorrectly'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Ссылка, "Объект.ОкончаниеПериода", , Отказ);
		
	КонецЕсли;
	
	
	ТекстСообщения = "Не задан договор рекрутера в строке %1";
	Для Каждого СтрокаТЧ Из ВыходыСотрудников Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЧ.ДоговорРекрутера) 
			И СтрокаТЧ.ТипРекрутера <> Перечисления.яя_ТипыРекрутеров.ОЗГПриказ 
			И СтрокаТЧ.ТипРекрутера <> Перечисления.яя_ТипыРекрутеров.ШтатныйПриказ
			И СтрокаТЧ.ТипРекрутера <> Перечисления.яя_ТипыРекрутеров.ВнештатныйГПХ 
			И Не СтрокаТЧ.БезВыплаты Тогда	
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(ТекстСообщения,СтрокаТЧ.НомерСтроки),,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.ВыходыСотрудников", СтрокаТЧ.НомерСтроки, "ДоговорРекрутера"),,Отказ);
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры






// Проверяет корректность вводимых дат, не проверяет заполненность дат.
//  При нахождении ошибки формирует сообщение пользователю, взводит флаг Отказ.
//
// Параметры:
//  Ссылка						 - 	 - ДокументСсылка, СправочникСсылка
//  ПроверяемаяДата				 - 	 - Дата
//  ПутьКПроверяемойДате		 - 	 - Строка
//  Отказ						 - 	 - Булево
//  ПредставлениеПроверяемойДаты - 	 - Строка
//  МинимальноеЗначение			 - 	 - Дата
//  ПредставлениеМинимальнойДаты - 	 - Строка
//  ПроверятьПустыеДаты			 - 	 - Булево, если Ложь то будет проверяться только заполненная дата.
//
Процедура ПроверитьКорректностьДаты(Ссылка, ПроверяемаяДата, ПутьКПроверяемойДате, Отказ, ПредставлениеПроверяемойДаты = "", МинимальноеЗначение = '19000101', ПредставлениеМинимальнойДаты = "", ПроверятьПустыеДаты = Истина) Экспорт
	
	Если (ПроверятьПустыеДаты Или ЗначениеЗаполнено(ПроверяемаяДата))
		И ПроверяемаяДата < НачалоДня(МинимальноеЗначение) Тогда
		
		Если ПустаяСтрока(ПредставлениеПроверяемойДаты) Тогда
			ТекстСообщения = НСтр("ru = 'Дата';
									|en = 'Date'") + " " + Формат(ПроверяемаяДата, "ДЛФ=DD");
		Иначе
			ТекстСообщения = ПредставлениеПроверяемойДаты + " (" + Формат(ПроверяемаяДата, "ДЛФ=DD") + ")";
		КонецЕсли;
		
		ТекстСообщения = ТекстСообщения + " " + НСтр("ru = 'не может быть меньше';
													|en = 'cannot be less than'") + " ";
		
		Если ПустаяСтрока(ПредставлениеМинимальнойДаты) Тогда
			ТекстСообщения = ТекстСообщения + Формат(МинимальноеЗначение, "ДЛФ=DD");
		Иначе
			ТекстСообщения = ТекстСообщения + ПредставлениеМинимальнойДаты + " (" + Формат(МинимальноеЗначение, "ДЛФ=DD") + ")"
		КонецЕсли;
		
		ОбщегоНазначения.СообщитьПользователю(
			ТекстСообщения,
			Ссылка,
			ПутьКПроверяемойДате,
			,
			Отказ);
		
	КонецЕсли;
	
КонецПроцедуры



// Устарела. Следует использовать ОбщегоНазначенияКлиент.СообщитьПользователю или ОбщегоНазначения.СообщитьПользователю
// Формирует и выводит сообщение, которое может быть связано с элементом 
// управления формы.
//
// Параметры:
//  ТекстСообщенияПользователю - Строка - текст сообщения.
//  КлючДанных                 - ЛюбаяСсылка - объект или ключ записи информационной базы, к которому это сообщение относится.
//  Поле                       - Строка - наименование реквизита формы.
//  ПутьКДанным                - Строка - путь к данным (путь к реквизиту формы).
//  Отказ                      - Булево - выходной параметр, всегда устанавливается в значение Истина.
//
// Пример:
//
//  1. Для вывода сообщения у поля управляемой формы, связанного с реквизитом объекта:
//  ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//   НСтр("ru = 'Сообщение об ошибке.'"), ,
//   "ПолеВРеквизитеФормыОбъект",
//   "Объект");
//
//  Альтернативный вариант использования в форме объекта:
//  ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//   НСтр("ru = 'Сообщение об ошибке.'"), ,
//   "Объект.ПолеВРеквизитеФормыОбъект");
//
//  2. Для вывода сообщения рядом с полем управляемой формы, связанным с реквизитом формы:
//  ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//   НСтр("ru = 'Сообщение об ошибке.'"), ,
//   "ИмяРеквизитаФормы");
//
//  3. Для вывода сообщения связанного с объектом информационной базы:
//  ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//   НСтр("ru = 'Сообщение об ошибке.'"), ОбъектИнформационнойБазы, "Ответственный",,Отказ);
//
//  4. Для вывода сообщения по ссылке на объект информационной базы:
//  ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//   НСтр("ru = 'Сообщение об ошибке.'"), Ссылка, , , Отказ);
//
//  Случаи некорректного использования:
//   1. Передача одновременно параметров КлючДанных и ПутьКДанным.
//   2. Передача в параметре КлючДанных значения типа отличного от допустимых.
//   3. Установка ссылки без установки поля (и/или пути к данным).
//
Процедура СообщитьПользователю(
		Знач ТекстСообщенияПользователю,
		Знач КлючДанных = Неопределено,
		Знач Поле = "",
		Знач ПутьКДанным = "",
		Отказ = Ложь) Экспорт
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщенияПользователю;
	Сообщение.Поле = Поле;
	
	ЭтоОбъект = Ложь;
	
#Если НЕ ТонкийКлиент И НЕ ВебКлиент И НЕ МобильныйКлиент Тогда
	Если КлючДанных <> Неопределено
	   И XMLТипЗнч(КлючДанных) <> Неопределено Тогда
		ТипЗначенияСтрокой = XMLТипЗнч(КлючДанных).ИмяТипа;
		ЭтоОбъект = СтрНайти(ТипЗначенияСтрокой, "Object.") > 0;
	КонецЕсли;
#КонецЕсли
	
	Если ЭтоОбъект Тогда
		Сообщение.УстановитьДанные(КлючДанных);
	Иначе
		Сообщение.КлючДанных = КлючДанных;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПутьКДанным) Тогда
		Сообщение.ПутьКДанным = ПутьКДанным;
	КонецЕсли;
		
	Сообщение.Сообщить();
	
	Отказ = Истина;
	
КонецПроцедуры


